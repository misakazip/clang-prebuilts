name: Build LLVM Components in Parallel

on:
  push:
    branches:
      - 18
    paths:
      - '.github/workflows/**.yml'
  schedule:
  - cron: 0 0 1 * *
  workflow_dispatch:

jobs:
  # Clangのビルドジョブ
  build-clang:
    runs-on: ubuntu-latest
    outputs:
      clang_path: ${{ steps.upload.outputs.path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            python3 \
            zlib1g-dev \
            libncurses5-dev \
            libssl-dev \
            libffi-dev

      - name: Clone LLVM repository
        run: git clone --depth 1 -b release/18.x https://github.com/llvm/llvm-project.git

      - name: Build Clang
        run: |
          mkdir -p llvm-project/build-clang
          cd llvm-project/build-clang
          cmake -G "Ninja" \
                -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_ENABLE_PROJECTS="clang" \
                -DCMAKE_INSTALL_PREFIX=install \
                ../llvm
          ninja
          ninja install

      - name: Compress Clang files
        run: |
          cd llvm-project/build-clang/install
          tar -czvf clang-binaries.tar.gz bin/ lib/ share/

      - name: Upload tar.gz file
        uses: actions/upload-artifact@v4
        with:
          name: clang-binaries.tar.gz
          path: llvm-project/build-clang/install/clang-binaries.tar.gz
          compression-level: 0
          if-no-files-found: error


  # LLDのビルドジョブ
  build-lld:
    runs-on: ubuntu-latest
    outputs:
      lld_path: ${{ steps.upload.outputs.path }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            build-essential \
            cmake \
            ninja-build \
            python3 \
            zlib1g-dev \
            libncurses5-dev \
            libssl-dev \
            libffi-dev

      - name: Clone LLVM repository
        run: git clone --depth 1 -b release/18.x https://github.com/llvm/llvm-project.git

      - name: Build LLD
        run: |
          mkdir -p llvm-project/build-lld
          cd llvm-project/build-lld
          cmake -G "Ninja" \
                -DCMAKE_BUILD_TYPE=Release \
                -DLLVM_ENABLE_PROJECTS="lld" \
                -DCMAKE_INSTALL_PREFIX=install \
                ../llvm
          ninja
          ninja install

      - name: Compress LLD files
        run: |
          cd llvm-project/build-lld/install
          tar -czvf lld-binaries.tar.gz bin/ lib/ share/
      
      - name: Upload tar.gz file
        uses: actions/upload-artifact@v4
        with:
          name: lld-binaries.tar.gz
          path: llvm-project/build-lld/install/lld-binaries.tar.gz
          compression-level: 0
          if-no-files-found: error



  # 成果物をリポジトリにアップロードするジョブ
  upload-artifacts:
    runs-on: ubuntu-latest
    needs: [build-clang, build-lld]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Download Clang artifacts
        uses: actions/download-artifact@v4
        with:
          name: clang-binaries.tar.gz

      - name: Download LLD artifacts
        uses: actions/download-artifact@v4
        with:
          name: lld-binaries.tar.gz

      - name: Extract and Upload Binaries to Repository
        run: |
          mkdir -p upload/bin upload/lib upload/share
          tar -xzvf clang-binaries.tar.gz -C upload
          tar -xzvf lld-binaries.tar.gz -C upload
          
          # リポジトリにファイルをコピーしてコミット
          cp -r upload/bin ./
          cp -r upload/lib ./
          cp -r upload/share ./
          rm -rm upload/
          git config --local user.name "github-actions"
          git config --local user.email "github-actions@github.com"
          git add .
          if ! git diff --cached --quiet; then
            git commit -m "Upload Clang and LLD binaries and dependencies"
            git push
          else
          echo "No changes to commit."
          fi
